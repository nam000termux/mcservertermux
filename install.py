import os
from threading import Thread
import requests
import time
import shutil
import sys
import netifaces

try:
  prefix=os.getenv("PREFIX")
  home=os.getenv("HOME")
  if not os.path.exists(prefix+"/tmp/mcsv.status"):
    try:
      open(prefix+"/tmp/mcsv.status", "x")
    except:
      pass
  def installsv():
    os.system(f"python {home}/install.py -noupdate")
  if not os.path.exists("/sdcard/mcsv"):
    installsv()
  def killtask():
    os.system("pkill java >/dev/null 2>&1")
    os.system("pkill tmux >/dev/null 2>&1")
  def onserver():
    open(prefix+"/tmp/mcsv.status", "w").write("on")
    global serverdabat
    serverdabat=True
  def offserver():
    killtask()
    open(prefix+"/tmp/mcsv.status", "w").write("off")
    global serverdabat
    serverdabat=False

  os.system("clear")

  if open(prefix+"/tmp/mcsv.status", "r").read().lower() == "on":
    onserver()
  else:
    offserver()
  worldname=["world"]
  once = True

  if ("-start" in sys.argv) and (not serverdabat):
      open(f"{home}/.tmux.conf", "w").write('set -g status off')
      os.chdir("/sdcard/mcsv")
      try:
        open("eula.txt", "x")
      except:
        pass
      if not "eula=true" in open("eula.txt", "r").read():
        match input("""B·∫°n c√≥ ƒë·ªìng √Ω eula c·ªßa minecraft ? (https://account.mojang.com/documents/minecraft_eula) [y/n] [y]: """).lower():
          case "n":
            exit()
          case other:
            open("eula.txt", "w").write("eula=true")
      os.system('tmux new-session -d -s minecraft "bash /sdcard/mcsv/start.sh"')
      onserver()
  elif ("-stop" in sys.argv) and serverdabat:
    offserver()
  class style():
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'

  while True:
    print(f"{style.WHITE}Minecraft Server menu by fb.com/nam000creeda")
    meminfo = dict((i.split()[0].rstrip(':'),int(i.split()[1])) for i in open('/proc/meminfo').readlines())
    memtotal = round(meminfo['MemTotal']/1000)
    memfree = round(meminfo['MemFree']/1000)
    swaptotal = round(meminfo['SwapTotal']/1000)
    swapfree = round(meminfo['SwapFree']/1000)
    try:
      for _ in open("/sdcard/mcsv/server.properties", "r").read().split("\n"):
        if "server-port=" in _:
          serverport=_.split("=")[1]
          break
    except:
      serverport="25565"
    print(f"""{style.RED}RAM: {memtotal} MB | Free: {memfree} MB
Swap: {swaptotal} MB | Free: {swapfree} MB
    """)
    try:
      ipgateway=netifaces.ifaddresses('wlan0')[netifaces.AF_INET][0]['addr']
    except:
      ipgateway="localhost"

    if open(prefix+"/tmp/mcsv.status", "r").read().lower() == "on":
      serverdabat=True
    else:
      serverdabat=False

    if serverdabat:
      tinhtrangserver = f"{style.GREEN}üü¢ƒêang b·∫≠t\n{style.CYAN}C√°ch m·ªü console: vu·ªët tr√°i sang ph·∫£i  ch·ªçn New Session v√† nh·∫≠p l·ªánh console"
    else:
      tinhtrangserver = f"{style.RED}üî¥Server ch∆∞a b·∫≠t{style.CYAN}"
    if serverport == "25565":
      print(f"""{style.CYAN}T√¨nh tr·∫°ng server: {tinhtrangserver}
IP offline: {ipgateway} ho·∫∑c 127.0.0.1
  """)
    else:
      print(f"""{style.CYAN}T√¨nh tr·∫°ng server: {tinhtrangserver}
IP wifi: {ipgateway}:{serverport} ho·∫∑c 127.0.0.1:{serverport}
  """)
    print(f"""{style.YELLOW}0. FAQ
1. B·∫≠t/T·∫Øt server
2. T√πy ch·ªânh server.properties
3. Th·∫ø gi·ªõi
4. ƒê·ªïi phi√™n b·∫£n v√† lo·∫°i server
5. Force stop (D√πng khi server ƒë√£ t·∫Øt nh∆∞ng v·∫´n c√≤n ch·∫°y)
6. Reload menu
7. T√πy ch·ªânh JVM
q. Tho√°t kh·ªèi menu
""")
    choose=input(f"{style.CYAN}L·ª±a ch·ªçn: ")
    os.system("clear")
    match choose:
      case "0":
        print("""1. C√†i plugin ngo√†i?
A: T·∫£i plugin v√†o file mcsv/plugins""")
        input(f"{style.YELLOW}[·∫§n enter ƒë·ªÉ quay l·∫°i menu]")
        os.system("clear")
      case "1":
        if not serverdabat:
          open(f"{home}/.tmux.conf", "w").write('set -g status off')

          os.chdir("/sdcard/mcsv")
          try:
            open("eula.txt", "x")
          except:
            pass
          if not "eula=true" in open("eula.txt", "r").read():
            match input("""B·∫°n c√≥ ƒë·ªìng √Ω eula c·ªßa minecraft ? (https://account.mojang.com/documents/minecraft_eula) [y/n] [y]: """).lower():
              case "n":
                exit()
              case other:
                open("eula.txt", "w").write("eula=true")
          os.system('tmux new-session -d -s minecraft "bash /sdcard/mcsv/start.sh"')
          onserver()
          input(f"""Ch·∫°y server th√†nh c√¥ng!
{style.YELLOW}[·∫§n enter ƒë·ªÉ tr·ªü l·∫°i menu]""")
          os.system("clear")
        else:
          os.system('tmux send -t minecraft "stop" ENTER')
          open(prefix+"/tmp/mcsv.status", "w").write("off")
          serverdabat=False
          input(f"""D·ª´ng server th√†nh c√¥ng!
{style.YELLOW}[·∫§n enter ƒë·ªÉ tr·ªü l·∫°i menu]""")
          os.system("clear")
      case "2":
        os.system("nano /sdcard/mcsv/server.properties")
        os.system("clear")
      case "3":
        if serverdabat:
          print("T·∫Øt server tr∆∞·ªõc khi l√†m ƒëi·ªÅu n√†y!")
          input(f"{style.YELLOW}[·∫§n enter ƒë·ªÉ ti·∫øp t·ª•c]")
        else:
          print(f"{style.YELLOW}1. T·∫°o th·∫ø gi·ªõi m·ªõi v√† x√≥a th·∫ø gi·ªõi c≈©")
          while True:
            match input(f"{style.CYAN}L·ª±a ch·ªçn: "):
              case "1":
                if input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·∫ø gi·ªõi ? [y/n] [n]: ").lower() in ["y", "yes"]:
                  for __ in open("/sdcard/mcsv/server.properties").read().split("\n"):
                    if ("level-name=" in __) and (not __.split("=")[1] in worldname):
                      worldname=__.split("=")[1]
                  try:
                    shutil.rmtree(f"/sdcard/mcsv/{worldname}", ignore_errors=True)
                    shutil.rmtree(f"/sdcard/mcsv/{worldname}_nether", ignore_errors=True)
                    shutil.rmtree(f"/sdcard/mcsv/{worldname}_the_end", ignore_errors=True)
                  except:
                    pass
                os.system("clear")
                break
      case "4":
        if serverdabat:
          print("T·∫Øt server tr∆∞·ªõc khi l√†m ƒëi·ªÅu n√†y!")
          input(f"{style.YELLOW}[·∫§n enter ƒë·ªÉ ti·∫øp t·ª•c]")
        else:
          installsv()
      case "5":
        if input("Server c√≥ th·ªÉ b·ªã l·ªói file th·∫ø gi·ªõi b·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?[y/n] [n]: ") in ["yes", "y"]:
          offserver()
        os.system("clear")
      case "6":
        os.system("clear")
        continue
      case "7":
        os.system("nano /sdcard/mcsv/jvm.txt")
        os.system("clear")
      case "q":
        if serverdabat:
          while True:
            print("""1. T·∫Øt menu v√† force stop server
2. T·∫Øt menu v√† gi·ªØ server
q. Quay l·∫°i menu
    """)
            match input("L·ª±a ch·ªçn: "):
              case "1":
                if input("Server c√≥ th·ªÉ b·ªã l·ªói file th·∫ø gi·ªõi b·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?[y/n] [n]: ") in ["yes", "y"]:
                  offserver()
                os.system("clear")
                exit()
              case "2":
                exit()
              case "q":
                break
              case other:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                input(f"{style.YELLOW}·∫§n enter ƒë·ªÉ tr·ªü l·∫°i")
        else:
          offserver()
          os.system("clear")
          exit()


      case other:
        os.system("clear")
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        input(f"{style.YELLOW}[·∫§n enter ƒë·ªÉ tr·ªü l·∫°i]")
        os.system("clear")

except KeyboardInterrupt:
  os.system("clear")
  offserver()

D:\berserkered-main>python main.py mcservertermux-main/main.py
Traceback (most recent call last):
  File "D:\berserkered-main\main.py", line 18, in <module>
    with open(obf_file) as code:
FileNotFoundError: [Errno 2] No such file or directory: 'mcservertermux-main/setup.py'

D:\berserkered-main>python main.py mcservertermux-main/main.py
import requests, subprocess, os, sys

prefix=os.getenv("PREFIX")
home=os.getenv("HOME")
os.system("clear")
while True:
  try:
    open("/sdcard/testtermuxstorage.txt", "w").write("hi")
    break
  except IOError:
    os.system("termux-setup-storage"),
    input("Ch·ªçn ƒë·ªìng √Ω v√† ·∫•n nh·∫≠p enter!")
    os.system("clear")

try:
  os.remove("/sdcard/testtermuxstorage.txt")
except:
  pass

if not os.path.exists(prefix+'/bin/java'):
  allversionjava=subprocess.check_output(["pkg", "list-all", "*jdk*"]).decode("utf-8")+"\n"+subprocess.check_output(["pkg", "list-all", "*jre*"]).decode("utf-8")
  os.system("clear")
  allversionjava_=[]

  u=1
  for _ in allversionjava.split("\n"):
    version=_.split("/")[0]
    if "jdk" in version or "jre" in version:
      print(str(u) + ".", version)
      allversionjava_.append(version)
      u+=1
  print("q. Tho√°t")
  while True:
    try:
      loaijava=input("Vui l√≤ng ch·ªçn lo·∫°i java: ")
      if loaijava=="q":
        os.system("clear")
        exit()
      tenjava=allversionjava_[int(loaijava)-1]
      break
    except ValueError:
      continue
os.system("clear")
while True:
  print("""1. Paper
2. Vanilla
3. Ch·ªçn file jar t·ª´ url
q. Tho√°t kh·ªèi menu
""")
  loaiserver=input("Vui l√≤ng ch·ªçn lo·∫°i minecraft server: ")
  os.system("clear")
  match loaiserver.lower():
    case "1":
      allversion=requests.get("https://api.papermc.io/v2/projects/paper").json()["versions"][::-1]

      u=1
      for i in allversion:
        print(str(u) + ".", i)
        u+=1
      print("q. Tr·ªü l·∫°i")
      while True:
        input1 = input("Vui l√≤ng ch·ªçn phi√™n b·∫£n minecraft server: ")
        try:
         version=allversion[int(input1)-1]
         quit=False
         break
        except:
          if input1.lower() == "q":
            quit=True
            os.system("clear")
            break
          else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
      if not quit:
        build = requests.get("http://api.papermc.io/v2/projects/paper/versions/" + version).json()["builds"][-1]

        namefile = requests.get(f"http://api.papermc.io/v2/projects/paper/versions/{version}/builds/{build}").json()["downloads"]["application"]["name"]
        os.system("clear")
        print(f"ƒêang t·∫£i paper {version}\nC√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian!")
        serverresponse = requests.get(f"http://api.papermc.io/v2/projects/paper/versions/{version}/builds/{build}/downloads/{namefile}")


        open("/sdcard/mcsv/server.jar", "wb").write(serverresponse.content)
        break
    case "2":
      vanillalist = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/vanilla/vanilla.json").json()
      i = 1
      for _ in vanillalist["version"]:
        print(str(i)+".", _)
        i+=1
      k=input("Ch·ªçn phi√™n b·∫£n: ")
      try:
        k=vanillalist["version"][int(k)-1]
        os.system("clear")
        print(f"ƒêang t·∫£i vanilla {k}\nC√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian!")
        serverresponse = requests.get(vanillalist[k])
        open("/sdcard/mcsv/server.jar", "wb").write(serverresponse.content)
        break
      except:
        if k == "q":
          quit=True
          os.system("clear")
    case "3":
      url=input("Nh·∫≠p link jar file: ")
      os.system("clear")
      print(f"ƒêang t·∫£i custom jar\nC√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian!")
      serverresponse = requests.get(str(url))
      open("/sdcard/mcsv/server.jar", "wb").write(serverresponse.content)
    case "q":
      exit()
    case other:
      os.system("clear")
if not os.path.exists(prefix+'/bin/java'):
  os.system("clear")
  print(f"ƒêang c√†i ƒë·∫∑t {tenjava}")
  os.system("pkg install -y " + tenjava + " >/dev/null 2>/dev/null")
if not os.path.exists("/sdcard/mcsv"):
  os.makedirs("/sdcard/mcsv")
if not "-noupdate" in sys.argv:
  open(home+"/.termux/termux.properties", "a").write("\nallow-external-apps = true")
  os.system("termux-open /sdcard/ZArchiverPro.apk")
  serverresponse = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/mcsv")
  open(prefix + "/bin/mcsv", "wb").write(serverresponse.content)
  os.system(f"chmod +x {prefix}/bin/mcsv")
  serverresponse = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/console")
  open(prefix + "/bin/console", "wb").write(serverresponse.content)
  os.system(f"chmod +x {prefix}/bin/console")
  serverresponse = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/.bashrc")
  open(home+"/.bashrc", "wb").write(serverresponse.content)
  serverresponse = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/menu.py")
  open(home+"/menu.py", "wb").write(serverresponse.content)
  serverresponse = requests.get("https://raw.githubusercontent.com/nam000termux/mcservertermux/main/start.sh")
  open("/sdcard/mcsv/start.sh", "wb").write(serverresponse.content)
  os.system("chmod +x /sdcard/mcsv/start.sh")
  serverresponse = requests.get("https://github.com/nam000termux/mcservertermux/releases/download/Update/ZArchiverPro.apk")
  open("/sdcard/ZArchiverPro.apk", "wb").write(serverresponse.content)

os.system("clear")
if not "-noupdate" in sys.argv:
  print("Nh·∫≠p l·ªánh mcsv -start ƒë·ªÉ m·ªü menu v√† b·∫≠t server")
